#!/usr/bin/env ruby

require 'bundler/inline'
gemfile true do
  source 'https://rubygems.org'
  gem 'pry'
  gem 'slop', '~> 4.0'
  gem 'concurrent-ruby'
end

require 'shellwords'
require 'concurrent'
require 'pp'
require 'etc'

defs = {
  video: {
    out_extension: 'mp4',
    quality: 25,
    width:   720,

    command: -> infile, outfile, options {
      <<-EOC
        ffmpeg -loglevel quiet -threads 12 -i #{Shellwords.escape infile} \
          -c:v libx264 -vf scale="#{options[:width]}:trunc(ow/a/2)*2" -crf #{options[:quality]} \
          -c:a libfdk_aac -profile:a aac_he -b:a 64k \
          #{Shellwords.escape outfile} 
      EOC
    },
    
    #out_extension: 'webm',
    #threads: 6,
    #quality: 30,
    #height:  360,

    #command: -> infile, outfile, options {
    #  <<-EOC
    #    ffmpeg -loglevel quiet -i #{Shellwords.escape infile} \
    #      -c:v libvpx-vp9 -f webm -vf scale=-1:#{options[:height]} -crf #{options[:quality]} -b:v 0 \
    #      -c:a libopus -b:a 64k \
    #      -threads #{options[:threads]} -speed 4 -tile-columns #{options[:threads]} -frame-parallel 1 \
    #      #{Shellwords.escape outfile} 
    #  EOC
    #},
  },

  audio: {
    out_extension: 'opus',

    command: -> infile, outfile, options {
      <<-EOC
        ffmpeg -loglevel quiet -i #{Shellwords.escape infile} -f wav - |
        nice opusenc --bitrate #{options[:bitrate]} --quiet - #{Shellwords.escape outfile}
      EOC
    },
  },
}

opts    = Slop.parse do |o|
  o.bool '--video'
  o.bool '--audio'
  o.bool '--keep'
  o.string '--destination'
  o.int '--bitrate', default: 80
end
files   = opts.parser.arguments.sort
options = opts.to_hash
STDERR.puts 'Please select a type with --video or --audio' unless options[:video] or options[:audio]
target = if options[:video] then :video else :audio end
target = defs[target].merge options

Thread.report_on_exception = true
Thread.abort_on_exception = true
threads = if options[:video] then 3 else Etc.nprocessors end
pool    = Concurrent::FixedThreadPool.new threads

files.each do |infile|
  pool.post do
    outfile = File.basename(infile).sub(/.[^\.]+$/, ".#{target[:out_extension]}")
    outfile = "#{option[:destination]}/#{outfile}" if options[:destination]
    options[:keep] = true if options[:destination]

    File.rename infile, (infile = "[INPUT]#{infile}") if infile == outfile

    cmd = target[:command].call infile, outfile, target
    File.unlink outfile if File.exists? outfile 

    puts "Starting #{infile}"
    ret = system "nice #{cmd}"
    if ret
      puts "Converted #{infile}"
      File.unlink infile unless options[:keep]
    else
      STDERR.puts "Failed to convert #{infile}"
    end
  end
end
pool.shutdown
pool.wait_for_termination

